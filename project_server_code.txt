const express = require('express');
const bodyParser = require('body-parser');
const app = express();
const mysql = require('mysql');
const MongoClient = require('mongodb').MongoClient;
const url = "mongodb://localhost:27017/";
app.use(bodyParser.urlencoded({ extended: true })); 


// Connect to MySQL database
var con = mysql.createConnection({
  host: "localhost",
  user: "root",
  password: "password",
  database: "steam_games"
});
con.connect(function(err) {
  if (err) throw err;
  console.log("Connected to MySQL");
});


// return html buffer of player_info -> game id's to steam game strings
function get_games_string(player_info, callback) {
  var buf = "";
  var count = 0;
  for (var i = 0; i < player_info.games.length; i++) {
    gameid = player_info.games[i];
    con.query("SELECT name FROM games WHERE appid = ?;", gameid, function(err, result) {
      if (err) throw err;  
      buf = buf + result[0].name + "<br>";
      if (count == player_info.games.length - 1) {
        console.log("RETURNING BUF VAL:" + buf);
	callback(buf);
      }
      count = count + 1;
    });
  }
};

// Main recommendation logic
app.post('/recommendations', (req, res) => {

    requested_user = "";
    requested_user_games = [];

    MongoClient.connect(url, function(err, db) {
      if (err) throw err;

      var dbo = db.db("Players");
      console.log("Connected to MongoDB");

      dbo.collection("players").findOne({name:req.body.username}, function(err, result) {

        if (err) throw err;

	if (!result) {
	  res.send("Record with name " + req.body.username + " does not exist.");
	} else {

          requested_user = result.name;
  	  requested_user_games = result.games;

          var buf = "<h1>" + requested_user + ", based on these games...</h1>";

	  get_games_string(result, function(tempbuf) {
	    buf = buf + tempbuf;
            buf = buf + "<h1>We recommend these games...</h1>";
	    console.log("BUF POST FUNCTION CALL:" + buf);

      	    con.query("SELECT name, publisher FROM games WHERE name LIKE 'Call of Duty%'", function (err, result) {
              if (err) throw err;
              for (var i = 0; i < result.length; i++) {
                buf = buf + result[i].name + "<br>";
              }
	      res.send(buf);	
            });
	  });
        }

      });

    });

});


// Test raw SQL query input
app.post('/sql', (req, res) => {

    con.query(req.body.sqlquery, function (err, result) {
      if (err) throw err;
      var buf = ""
      for (var i = 0; i < result.length; i++) {
        buf = buf + result[i].name + "<br>";
      }
      res.send(buf);	
    });

});


// Test raw Mongo input
app.post('/mongo', (req, res) => {

    MongoClient.connect(url, function(err, db) {
      if (err) throw err;

      var dbo = db.db("Players");
      console.log("Connected to MongoDB");

      dbo.collection("players").findOne({name:req.body.mongousername}, function(err, result) {

        if (err) throw err;
        if (!result) {
	  dbo.collection("players").insertOne({name:req.body.mongousername, games:[parseInt(req.body.mongogameid)]});
          res.send("Successfully inserted record.");
        } else {
	  dbo.collection("players").updateOne(result, {$addToSet:{games:parseInt(req.body.mongogameid)}});
	  res.send("Successfully updated record.");
        }

      });

    });

});

// Test raw Mongo deletes
app.post('/mongodelete', (req, res) => {

    MongoClient.connect(url, function(err, db) {
      if (err) throw err;

      var dbo = db.db("Players");
      console.log("Connected to MongoDB");

      dbo.collection("players").deleteOne({name:req.body.mongousernamedelete}, function(err, result) {

        if (err) throw err;
        if (result.deletedCount == 0) {
          res.send("Record with name " + req.body.mongousernamedelete + " does not exist.");
        } else {
	  res.send("Successfully deleted record.");
        }

      });

    });

});

const port = 8080;

app.listen(port, () => {
  console.log(`Server running on port${port}`);
});
